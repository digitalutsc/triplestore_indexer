<?php

/**
 * @file
 * Contains triplestore_indexer.module.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\advancedqueue\Entity\Queue;
use Drupal\advancedqueue\Job;

/**
 * Implements hook_help().
 */
function triplestore_indexer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the triplestore_indexer module.
    case 'help.page.triplestore_indexer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module will listening to Content event and indexing it to RDF and send result to Triple store') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function triplestore_indexer_theme() {
  return [
    'triplestore_indexer' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 */
function triplestore_indexer_entity_insert(EntityInterface $entity) {
  drupal_register_shutdown_function('execute_indexing_action', 'index_node_to_triplestore_advancedqueue', $entity);
}

/**
 * Implements hook_entity_update().
 */
function triplestore_indexer_entity_update(EntityInterface $entity) {
  drupal_register_shutdown_function('execute_indexing_action', 'index_node_to_triplestore_advancedqueue', $entity);
}

/**
 * Implements hook_entity_delete().
 */
function triplestore_indexer_entity_predelete(EntityInterface $entity) {
  //execute_indexing_action('delete_node_in_triplestore_advancedqueue', $entity);
  drupal_register_shutdown_function('execute_indexing_action', 'delete_node_in_triplestore_advancedqueue', $entity);
}

/**
 * Execute action with action name.
 */
function execute_indexing_action(string $actionName, EntityInterface $entity) {
  $action = \Drupal::entityTypeManager()
    ->getStorage('action')
    ->load($actionName);
  if ($action) {
    $action->execute([$entity]);
  }
}

/**
 * Debug function: display any variable to error log.
 *
 * @param $thing
 */
if (!function_exists('print_log')) {

  /**
   * Logging in apache log.
   */
  function print_log($thing) {
    error_log(print_r($thing, TRUE), 0);
  }

}
/**
 * Debug function: display any variable to current webpage.
 *
 * @param $thing
 */
if (!function_exists('logging')) {

  /**
   * Logging in webpage.
   */
  function logging($thing) {
    echo "<pre>";
    print_r($thing);
    echo "</pre>";
  }

}

/**
 * Debug function: display any variable to drupal Reports Log messages.
 */
if (!function_exists('drupal_log')) {

  /**
   * Logging in Recent Log messages.
   */
  function drupal_log($msg, $type = "error") {
    switch ($type) {
      case "notice":
        \Drupal::logger(basename(__FILE__, '.module'))->notice($msg);
        break;

      case "log":
        \Drupal::logger(basename(__FILE__, '.module'))->log(RfcLogLevel::NOTICE, $msg);
        break;

      case "warning":
        \Drupal::logger(basename(__FILE__, '.module'))->warning($msg);
        break;

      case "alert":
        \Drupal::logger(basename(__FILE__, '.module'))->alert($msg);
        break;

      case "critical":
        \Drupal::logger(basename(__FILE__, '.module'))->critical($msg);
        break;

      case "debug":
        \Drupal::logger(basename(__FILE__, '.module'))->debug($msg);
        break;

      case "info":
        \Drupal::logger(basename(__FILE__, '.module'))->info($msg);
        break;

      case "emergency":
        \Drupal::logger(basename(__FILE__, '.module'))->emergency($msg);
        break;

      default:
        \Drupal::logger(basename(__FILE__, '.module'))->error($msg);
        break;
    }
  }

}

/**
 * Funcation call embedded after hook_insert,hook_update,hook_delete executed.
 */
function queue_process(EntityInterface $entity, $action) {
  $config = \Drupal::config('triplestore_indexer.settings');

  // Fix warning when Config form hasn't been setup.
  if (!isset($config) || empty($config->get("advancedqueue_id"))) {
    return;
  }

  // Get condition of which content type will be indexed.
  $indexedContentTypes = (is_array($config->get('content_type_to_index'))) ? array_keys(array_filter($config->get('content_type_to_index'))) : [];

  switch ($action) {
    case 'insert':
    case 'update':
      if ($entity->getEntityTypeId() === 'node' && in_array($entity->bundle(), $indexedContentTypes)) {

        // Create a job and add to Advanced Queue.
        $payload = [
          'nid' => $entity->id(),
          'type' => $entity->getEntityTypeId(),
          'action' => $action,
          'max_tries' => $config->get("aqj_max_retries"),
          'retry_delay' => $config->get("aqj_retry_delay"),
        ];

        // Create a job and add to Advanced Queue.
        $job = Job::create('triplestore_index_job', $payload);
        if ($job instanceof Job) {
          $q = Queue::load($config->get("advancedqueue_id"));
          $q->enqueueJob($job);
        }
      }
      break;

    case 'delete':
    case '[Update] delete if exist':
      if ($entity->getEntityTypeId() === 'node' && in_array($entity->bundle(), $indexedContentTypes)) {
        // Get @id of other components associated with node.
        $payload = [
          'nid' => $entity->id(),
          'type' => $entity->getEntityTypeId(),
          'action' => $action,
          'max_tries' => $config->get("aqj_max_retries"),
          'retry_delay' => $config->get("aqj_retry_delay"),
        ];
        $service = \Drupal::service('triplestore_indexer.indexing');
        $others = $service->getOtherConmponentAssocNode($payload);

        // Create a job and add to Advanced Queue.
        if (is_array($others) && count($others) > 0) {
          $payload['others'] = $others;
        }

        $job = Job::create('triplestore_index_job', $payload);
        if ($job instanceof Job) {
          $q = Queue::load($config->get("advancedqueue_id"));
          $q->enqueueJob($job);
        }
      }
      break;

    default:
      break;
  }
}

/**
 * Get Term ID out of serialized URI.
 */
function get_termid_from_uri(string $uri) {
  global $base_url;
  return str_replace("?_format=jsonld", "", str_replace($base_url . "/taxonomy/term/", "", $uri));
}

/**
 * Get Vocabulary from Term ID.
 */
function get_vocabulary_from_termid(int $term_id) {
  $term = Term::load($term_id);
  return $term->bundle();
}
